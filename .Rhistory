df_optimal_grid[df_optimal_grid$transport_cost < 1500000,]$build_hospital = 0
v_begin_solution_three <- df_optimal_grid[df_optimal_grid$eligible_hospital,]$build_hospital
# < 2 000 000
df_optimal_grid[df_optimal_grid$transport_cost < 2000000,]$build_hospital = 0
v_begin_solution_four <- df_optimal_grid[df_optimal_grid$eligible_hospital,]$build_hospital
m_begin_solution <- matrix(c(v_begin_solution, v_begin_solution_two, v_begin_solution_three, v_begin_solution_four, v_suggestion_solution_trimmed, v_suggestion_solution_trimmed_2), ncol=1488, byrow=TRUE)
return(m_begin_solution)
}
##########################################################################
##                          Genetic Algorithm                           ##
##########################################################################
f_ga_optimize <- function(df_grid, m_begin_solution, investment_cost_per_hospital, operational_cost_per_hospital, transport_cost_per_mile, min_accident_coverage) {
f_setup(df_grid, investment_cost_per_hospital, operational_cost_per_hospital, transport_cost_per_mile, min_accident_coverage)
# v_hospital_assignment: a logical vector (0 or 1's), indicating whether a hospital should be built on a cell.
# Note: to reduce the search space, the length of this vector is only cells with eligible_hospital == TRUE.
f_fitness <- function(v_hospital_assignment) {
total_cost = 0
# Optimize the assignment of accidents to hospitals
m_assignment <- f_optimal_assignment(v_hospital_assignment, m_transport_cost_to_hospital_per_accident)
# Verify whether the assignment matrix actually matches our constraints (98% coverage)
missing_coverage <- f_get_missing_coverage(m_assignment)
missing_coverage_percentage <- missing_coverage / cte_sum_total_accidents
if (missing_coverage > cte_max_accidents_to_not_cover) {
# Very harsh penalty (1.797693e+308)
return(-(cte_penalty + (missing_coverage_percentage * cte_penalty)))
}
# Calculate the individual cost matrix
m_hospital_costs <- f_calculate_individual_cost(v_hospital_assignment, m_assignment)
# Fourth column is the total cost
total_cost = -sum(m_hospital_costs[,4])
# Turn the sum negative!
return(total_cost)
}
count_of_eligible_hospitals = sum(df_grid$eligible_hospital)
print("[*] Running Genetic Algorithm on the grid")
# , suggestions = m_begin_solution
GA <- ga("binary", fitness = f_fitness, maxiter = 50, run = 200, seed = 123, nBits = count_of_eligible_hospitals)
# Inspect solution
plot(GA)
summary(GA)
# Extract solution
#print(paste0("sum of solution", sum(summary(GA)$solution)))
return(GA)
}
GA <- f_ga_optimize(grid_CNT, m_begin_solution, 50000000, 5000 * 20, 10, 0.98)
##########################################################################
##                                LOAD DATA                             ##
##########################################################################
# Forecasts per region
forecasts_regions <- read.csv(file = "forecasted_accidents_allRegions_monthly.csv",
header = TRUE,
sep = ',')
str(forecasts_regions)
# City information per region
region_information <- read.csv(file = "forecasted_accidents_wCity.csv",
header = TRUE,
sep = ',')
str(region_information)
# BASE TABLE
# The basetable matrix for this optimization must look like this.
###############################################################################################
#     x      |      y      |     eligible_hospital    |     inhabitants  |  total_accidents   #
#---------------------------------------------------------------------------------------------#
#     -128   |      48.9   |        TRUE              |    59500        |     1523            #
###############################################################################################
# BASE TABLE AFTER OPTIMIZATION
# After the optimization, a new column "build_hospital" will be attached.
###############################################################################################################################################################################################
#     x      |      y      |     eligible_hospital    |   inhabitants  |  total_accidents   |   build_hospital  |    investment_cost  |   operational_cost  |  transport_cost  | total_cost   #
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
#     -128   |      48.9   |         TRUE             |   59500        |     1523           |   TRUE            |     50 000 000      |      50 000 000     |  1 000 000       |  101 000 000 #
###############################################################################################################################################################################################
## Aggregrates all the monthly accidents to a total.
f_create_aggregate_accidents_to_total <- function(df_grid) {
v_columns_all = colnames(df_grid)
v_columns_CNT = grep("X20", v_columns_all, value = TRUE)
df_grid$total_accidents <- rowSums(df_grid[, v_columns_CNT])
df_grid <- df_grid[, -which(names(df_grid) %in% v_columns_CNT)]
# Exclude regions with no accidents (we assume these regions are no good to place a hospital)
df_grid <- df_grid[df_grid$total_accidents > 0,]
# Replace negative forecasts by zero (ONLY needed if we don't execute the previous statement)
#df_grid$total_accidents[df_grid$total_accidents < 0] <- 0
# Reset index
rownames(df_grid) <- NULL
return(df_grid)
}
grid_CNT <- f_create_aggregate_accidents_to_total(forecasts_regions)
## Create basetable matrix
f_create_basetable_matrix <- function(base, region_info){
region_info <- region_info[,c("Region","City","State","nbr_inhabitants","inCity")]
base <- merge(x = grid_CNT, y = region_info, by = "Region", all.x = TRUE)
# Some dirty cleaning
base$X <- NULL
base$inhabitants <- base$nbr_inhabitants
base$nbr_inhabitants <- NULL
# Add label indicating whether region is a suitable place to build a hospital
base$eligible_hospital <- FALSE
base[(is.na(base$inCity)), ] <- 0
base[base$inCity == 1,]$eligible_hospital <- TRUE
base$eligible_hospital = as.logical(base$eligible_hospital)
# Select needed variables
base$region = base$Region
base$city = base$City
base$state = base$State
base <- base[,c("x","y","region","city","state", "eligible_hospital","inhabitants","total_accidents")]
return(base)
}
grid_CNT <- f_create_basetable_matrix(grid_CNT, region_information)
GA <- f_ga_optimize(grid_CNT, m_begin_solution, 50000000, 5000 * 20, 10, 0.98)
m_begin_solution <- matrix(c(v_initial_assignment), ncol=1624, byrow=TRUE)
f_create_initial_assignment <- function(df_grid){
df_grid <- df_grid[df_grid$eligible_hospital == 1, c("region","city","state","eligible_hospital")]
df_grid <- df_grid[order(df_grid$state,df_grid$city),]
df_grid$assignment <- 0
# Build exactly one hospital in every big city (> 50k inhabitants)
for (i in 1:(nrow(df_grid)-1)){
if (i == 1){
df_grid[i,]$assignment <- 1
}
else if (( df_grid[i-1,c("city")] != df_grid[i,c("city")] )){
df_grid[i,]$assignment <- 1
}
else {
df_grid[i,]$assignment <- 0
}
}
v_initial_assignment <- df_grid$assignment
return(v_initial_assignment)
}
v_initial_assignment <- f_create_initial_assignment(grid_CNT)
#sum(v_initial_assignment)
f_ga_optimize <- function(df_grid, m_begin_solution, investment_cost_per_hospital, operational_cost_per_hospital, transport_cost_per_mile, min_accident_coverage) {
#f_setup(df_grid, investment_cost_per_hospital, operational_cost_per_hospital, transport_cost_per_mile, min_accident_coverage)
# v_hospital_assignment: a logical vector (0 or 1's), indicating whether a hospital should be built on a cell.
# Note: to reduce the search space, the length of this vector is only cells with eligible_hospital == TRUE.
f_fitness <- function(v_hospital_assignment) {
total_cost = 0
# Optimize the assignment of accidents to hospitals
m_assignment <- f_optimal_assignment(v_hospital_assignment, m_transport_cost_to_hospital_per_accident)
# Verify whether the assignment matrix actually matches our constraints (98% coverage)
missing_coverage <- f_get_missing_coverage(m_assignment)
missing_coverage_percentage <- missing_coverage / cte_sum_total_accidents
if (missing_coverage > cte_max_accidents_to_not_cover) {
# Very harsh penalty (1.797693e+308)
return(-(cte_penalty + (missing_coverage_percentage * cte_penalty)))
}
# Calculate the individual cost matrix
m_hospital_costs <- f_calculate_individual_cost(v_hospital_assignment, m_assignment)
# Fourth column is the total cost
total_cost = -sum(m_hospital_costs[,4])
# Turn the sum negative!
return(total_cost)
}
count_of_eligible_hospitals = sum(df_grid$eligible_hospital)
print("[*] Running Genetic Algorithm on the grid")
#
GA <- ga("binary", fitness = f_fitness, suggestions = m_begin_solution, maxiter = 50, run = 200, seed = 123, nBits = count_of_eligible_hospitals)
# Inspect solution
plot(GA)
summary(GA)
# Extract solution
#print(paste0("sum of solution", sum(summary(GA)$solution)))
return(GA)
}
# Helper function that returns the cost for a given solution.
f_check_solution <- function(v_hospital_assignment) {
cost_result <- f_calculate_total_cost(v_hospital_assignment)
return(cost_result)
}
#f_check_solution(rep(1, 1488), grid_CNT, 50000000, 5000 * 20, 10)
#f_setup(grid_CNT, 50000000, 5000 * 20, 10, 0.98)
m_begin_solution <- matrix(c(v_initial_assignment), ncol=1624, byrow=TRUE)
GA <- f_ga_optimize(grid_CNT, m_begin_solution, 50000000, 5000 * 20, 10, 0.98)
f_check_coverage_of_solution <- function(v_hospital_assignment) {
# Optimize the assignment of accidents to hospitals
m_assignment <- f_optimal_assignment(v_hospital_assignment, m_transport_cost_to_hospital_per_accident)
# Calculate coverage percentage
coverage <- f_get_missing_coverage(m_assignment)
print(coverage)
coverage_percentage <- coverage / cte_sum_total_accidents
return(1 - coverage_percentage)
}
f_check_coverage_of_solution(v_initial_assignment)
f_ga_optimize <- function(df_grid, m_begin_solution, investment_cost_per_hospital, operational_cost_per_hospital, transport_cost_per_mile, min_accident_coverage) {
#f_setup(df_grid, investment_cost_per_hospital, operational_cost_per_hospital, transport_cost_per_mile, min_accident_coverage)
# v_hospital_assignment: a logical vector (0 or 1's), indicating whether a hospital should be built on a cell.
# Note: to reduce the search space, the length of this vector is only cells with eligible_hospital == TRUE.
f_fitness <- function(v_hospital_assignment) {
total_cost = 0
# Optimize the assignment of accidents to hospitals
m_assignment <- f_optimal_assignment(v_hospital_assignment, m_transport_cost_to_hospital_per_accident)
# Verify whether the assignment matrix actually matches our constraints (98% coverage)
missing_coverage <- f_get_missing_coverage(m_assignment)
missing_coverage_percentage <- missing_coverage / cte_sum_total_accidents
if (missing_coverage > cte_max_accidents_to_not_cover) {
# Very harsh penalty (1.797693e+308)
return(-(cte_penalty + (missing_coverage_percentage * cte_penalty)))
}
# Calculate the individual cost matrix
m_hospital_costs <- f_calculate_individual_cost(v_hospital_assignment, m_assignment)
# Fourth column is the total cost
total_cost = -sum(m_hospital_costs[,4])
# Turn the sum negative!
return(total_cost)
}
count_of_eligible_hospitals = sum(df_grid$eligible_hospital)
print("[*] Running Genetic Algorithm on the grid")
#
GA <- ga("binary", fitness = f_fitness, suggestions = m_begin_solution, maxiter = 1, run = 200, seed = 123, nBits = count_of_eligible_hospitals)
# Inspect solution
plot(GA)
summary(GA)
# Extract solution
#print(paste0("sum of solution", sum(summary(GA)$solution)))
return(GA)
}
m_begin_solution <- matrix(c(v_initial_assignment), ncol=1624, byrow=TRUE)
GA <- f_ga_optimize(grid_CNT, m_begin_solution, 50000000, 5000 * 20, 10, 0.98)
f_ga_optimize_v2 <- function(df_grid, min_accident_coverage) {
#f_setup(df_grid, investment_cost_per_hospital, operational_cost_per_hospital, transport_cost_per_mile, min_accident_coverage)
# v_hospital_assignment: a logical vector (0 or 1's), indicating whether a hospital should be built on a cell.
# Note: to reduce the search space, the length of this vector is only cells with eligible_hospital == TRUE.
f_fitness <- function(v_hospital_assignment) {
total_cost = 0
# Optimize the assignment of accidents to hospitals
m_assignment <- f_optimal_assignment(v_hospital_assignment, m_transport_cost_to_hospital_per_accident)
# Verify whether the assignment matrix actually matches our constraints (98% coverage)
missing_coverage <- f_get_missing_coverage(m_assignment)
missing_coverage_percentage <- missing_coverage / cte_sum_total_accidents
if (missing_coverage > cte_max_accidents_to_not_cover) {
# Very harsh penalty (1.797693e+308)
return(-(cte_penalty + (missing_coverage_percentage * cte_penalty)))
}
return(sum(v_hospital_assignment))
}
count_of_eligible_hospitals = sum(df_grid$eligible_hospital)
print("[*] Running Genetic Algorithm on the grid")
#
GA <- ga("binary", fitness = f_fitness, maxiter = 1, run = 200, seed = 123, nBits = count_of_eligible_hospitals)
# Inspect solution
plot(GA)
summary(GA)
# Extract solution
#print(paste0("sum of solution", sum(summary(GA)$solution)))
return(GA)
}
GA <- f_ga_optimize_v2(grid_CNT, 0.98)
f_ga_optimize_v2 <- function(df_grid, min_accident_coverage) {
#f_setup(df_grid, investment_cost_per_hospital, operational_cost_per_hospital, transport_cost_per_mile, min_accident_coverage)
# v_hospital_assignment: a logical vector (0 or 1's), indicating whether a hospital should be built on a cell.
# Note: to reduce the search space, the length of this vector is only cells with eligible_hospital == TRUE.
f_fitness <- function(v_hospital_assignment) {
total_cost = 0
# Optimize the assignment of accidents to hospitals
m_assignment <- f_optimal_assignment(v_hospital_assignment, m_transport_cost_to_hospital_per_accident)
# Verify whether the assignment matrix actually matches our constraints (98% coverage)
missing_coverage <- f_get_missing_coverage(m_assignment)
missing_coverage_percentage <- missing_coverage / cte_sum_total_accidents
if (missing_coverage > cte_max_accidents_to_not_cover) {
# Very harsh penalty (1.797693e+308)
return(-(cte_penalty + (missing_coverage_percentage * cte_penalty)))
}
return(-sum(v_hospital_assignment))
}
count_of_eligible_hospitals = sum(df_grid$eligible_hospital)
print("[*] Running Genetic Algorithm on the grid")
#
GA <- ga("binary", fitness = f_fitness, maxiter = 1, run = 200, seed = 123, nBits = count_of_eligible_hospitals)
# Inspect solution
plot(GA)
summary(GA)
# Extract solution
#print(paste0("sum of solution", sum(summary(GA)$solution)))
return(GA)
}
GA <- f_ga_optimize_v2(grid_CNT, 0.98)
f_ga_optimize_v2 <- function(df_grid, min_accident_coverage) {
#f_setup(df_grid, investment_cost_per_hospital, operational_cost_per_hospital, transport_cost_per_mile, min_accident_coverage)
# v_hospital_assignment: a logical vector (0 or 1's), indicating whether a hospital should be built on a cell.
# Note: to reduce the search space, the length of this vector is only cells with eligible_hospital == TRUE.
f_fitness <- function(v_hospital_assignment) {
total_cost = 0
# Optimize the assignment of accidents to hospitals
m_assignment <- f_optimal_assignment(v_hospital_assignment, m_transport_cost_to_hospital_per_accident)
# Verify whether the assignment matrix actually matches our constraints (98% coverage)
missing_coverage <- f_get_missing_coverage(m_assignment)
missing_coverage_percentage <- missing_coverage / cte_sum_total_accidents
if (missing_coverage > cte_max_accidents_to_not_cover) {
# Very harsh penalty (1.797693e+308)
return(-(cte_penalty + (missing_coverage_percentage * cte_penalty)))
}
return(-sum(v_hospital_assignment))
}
count_of_eligible_hospitals = sum(df_grid$eligible_hospital)
print("[*] Running Genetic Algorithm on the grid")
#
GA <- ga("binary", fitness = f_fitness, maxiter = 10, run = 200, seed = 123, nBits = count_of_eligible_hospitals)
# Inspect solution
plot(GA)
summary(GA)
# Extract solution
#print(paste0("sum of solution", sum(summary(GA)$solution)))
return(GA)
}
GA <- f_ga_optimize_v2(grid_CNT, 0.98)
?ga
optimal_grid_CNT <- f_build_optimal_grid(v_initial_assignment, grid_CNT)
f_build_optimal_grid <- function(v_optimal_hospital_assignment, df_grid) {
df_grid$build_hospital = FALSE
df_grid[df_grid$eligible_hospital == TRUE,]$build_hospital = as.logical(v_optimal_hospital_assignment)
# Optimize the assignment of accidents to hospitals
m_assignment <- f_optimal_assignment(v_optimal_hospital_assignment, m_transport_cost_to_hospital_per_accident)
# Get  cost matrix
m_costs <- f_calculate_individual_cost(v_optimal_hospital_assignment, m_assignment)
print(nrow(m_costs))
# Investment cost.
df_grid$investment_cost = 0
df_grid[df_grid$eligible_hospital == TRUE,]$investment_cost = m_costs[,1]
# Operational cost
df_grid$operational_cost = 0
df_grid[df_grid$eligible_hospital == TRUE,]$operational_cost = m_costs[,2]
# Transport cost
df_grid$transport_cost = 0
df_grid[df_grid$eligible_hospital == TRUE,]$transport_cost = m_costs[,3]
# Total cost
df_grid$total_cost = 0
df_grid[df_grid$eligible_hospital == TRUE,]$total_cost = m_costs[,4]
return(df_grid)
}
#optimal_grid_CNT <- f_build_optimal_grid(c(summary(GA)$solution), grid_CNT)
optimal_grid_CNT <- f_build_optimal_grid(v_initial_assignment, grid_CNT)
GA
optimal_grid_CNT$build_hospital = 0
optimal_grid_CNT$build_hospital = FALSE
runApp('~/Documents/2020/PPA/PrescriptiveAnalytics/MakeAmericaHealthyAgain')
f_check_coverage_of_solution(optimal_grid_CNT[optimal_grid_CNT$eligible_hospital,]$build_hospital)
runApp('~/Documents/2020/PPA/PrescriptiveAnalytics/MakeAmericaHealthyAgain')
runApp('~/Documents/2020/PPA/PrescriptiveAnalytics/MakeAmericaHealthyAgain')
?addCircles
runApp('~/Documents/2020/PPA/PrescriptiveAnalytics/MakeAmericaHealthyAgain')
optimal_grid_CNT[optimal_grid_CNT$build_hospital,]
runApp('~/Documents/2020/PPA/PrescriptiveAnalytics/MakeAmericaHealthyAgain')
runApp('~/Documents/2020/PPA/PrescriptiveAnalytics/MakeAmericaHealthyAgain')
runApp('~/Documents/2020/PPA/PrescriptiveAnalytics/MakeAmericaHealthyAgain')
runApp('~/Documents/2020/PPA/PrescriptiveAnalytics/MakeAmericaHealthyAgain')
runApp('~/Documents/2020/PPA/PrescriptiveAnalytics/MakeAmericaHealthyAgain')
f_check_coverage_of_solution(optimal_grid_CNT[optimal_grid_CNT$eligible_hospital,]$build_hospital)
runApp('~/Documents/2020/PPA/PrescriptiveAnalytics/MakeAmericaHealthyAgain')
f_check_coverage_of_solution(optimal_grid_CNT[optimal_grid_CNT$eligible_hospital,]$build_hospital)
runApp('~/Documents/2020/PPA/PrescriptiveAnalytics/MakeAmericaHealthyAgain')
f_check_coverage_of_solution(optimal_grid_CNT[optimal_grid_CNT$eligible_hospital,]$build_hospital)
runApp('~/Documents/2020/PPA/PrescriptiveAnalytics/MakeAmericaHealthyAgain')
f_check_coverage_of_solution(optimal_grid_CNT[optimal_grid_CNT$eligible_hospital,]$build_hospital)
runApp('~/Documents/2020/PPA/PrescriptiveAnalytics/MakeAmericaHealthyAgain')
f_check_coverage_of_solution(optimal_grid_CNT[optimal_grid_CNT$eligible_hospital,]$build_hospital)
cte_cutoff_transport_cost <- 1100
f_check_coverage_of_solution(optimal_grid_CNT[optimal_grid_CNT$eligible_hospital,]$build_hospital)
cte_cutoff_transport_cost <- 1150
f_check_coverage_of_solution(optimal_grid_CNT[optimal_grid_CNT$eligible_hospital,]$build_hospital)
v_initial_solution_new <- optimal_grid_CNT[optimal_grid_CNT$eligible_hospital,]$build_hospital
save(v_initial_solution_new, file = "custom_selected_solution.rds")
cte_cutoff_transport_cost <- 1000
110 * 0.85
f_generate_matrix_transport_cost <- function(df_grid) {
## Make local matrix of the x,y coords of the grid
m_grid <- cbind(df_grid$x, df_grid$y)
## Calculate distance grid
## BUG: this uses the euclidian distance, and isn't actually accurate with the curverature of earth
## but then again, for a radius of 100 miles this likely doesn't matter.
## A better but very computationally expensive "improvement" would be to use haversin.
m_distances_between_all_regions <- as.matrix(dist(m_grid, diag = TRUE, upper = TRUE))
## Reduce it to a matrix to only contains the distances to hospitals
cells_in_grid_capable_of_hospital = as.integer(rownames(df_grid[df_grid$eligible_hospital == TRUE,]))
# This is a horrible constant that approximates the radian distance to kilometers
# It's absoluletly horrible but hey, you're asking a european to plan usa hospitals.
# What do I care?
cte_cost_per_kilometer = (cte_transport_cost_per_mile / 1.609344)
cte_radian_to_kilometers_coeff = 95
m_costs_transport <- (cte_cost_per_kilometer * cte_radian_to_kilometers_coeff) * m_distances_between_all_regions[c(cells_in_grid_capable_of_hospital),]
# Return the cost matrix per accident of size h x c,
# where h is the amount of cells that can house a hospital, and c is the total amount of cells in the grid.
return(m_costs_transport)
}
f_setup(grid_CNT, 50000000, 5000 * 20, 10, 0.98)
cte_cutoff_transport_cost <- 1000
f_check_coverage_of_solution(optimal_grid_CNT[optimal_grid_CNT$eligible_hospital,]$build_hospital)
cte_cutoff_transport_cost <- 950
f_check_coverage_of_solution(optimal_grid_CNT[optimal_grid_CNT$eligible_hospital,]$build_hospital)
cte_cutoff_transport_cost <- 960
cte_cutoff_transport_cost <- 940
f_check_coverage_of_solution(optimal_grid_CNT[optimal_grid_CNT$eligible_hospital,]$build_hospital)
cte_cutoff_transport_cost <- 970
f_check_coverage_of_solution(optimal_grid_CNT[optimal_grid_CNT$eligible_hospital,]$build_hospital)
f_ga_optimize <- function(df_grid, m_begin_solution, investment_cost_per_hospital, operational_cost_per_hospital, transport_cost_per_mile, min_accident_coverage) {
#f_setup(df_grid, investment_cost_per_hospital, operational_cost_per_hospital, transport_cost_per_mile, min_accident_coverage)
# v_hospital_assignment: a logical vector (0 or 1's), indicating whether a hospital should be built on a cell.
# Note: to reduce the search space, the length of this vector is only cells with eligible_hospital == TRUE.
f_fitness <- function(v_hospital_assignment) {
total_cost = 0
# Optimize the assignment of accidents to hospitals
m_assignment <- f_optimal_assignment(v_hospital_assignment, m_transport_cost_to_hospital_per_accident)
# Verify whether the assignment matrix actually matches our constraints (98% coverage)
missing_coverage <- f_get_missing_coverage(m_assignment)
missing_coverage_percentage <- missing_coverage / cte_sum_total_accidents
if (missing_coverage > cte_max_accidents_to_not_cover) {
# Very harsh penalty (1.797693e+308)
return(-(cte_penalty + (missing_coverage_percentage * cte_penalty)))
}
# Calculate the individual cost matrix
m_hospital_costs <- f_calculate_individual_cost(v_hospital_assignment, m_assignment)
# Fourth column is the total cost
total_cost = -sum(m_hospital_costs[,4])
# Turn the sum negative!
return(total_cost)
}
count_of_eligible_hospitals = sum(df_grid$eligible_hospital)
print("[*] Running Genetic Algorithm on the grid")
#
GA <- ga("binary", fitness = f_fitness, suggestions = m_begin_solution, maxiter = 1, run = 200, seed = 123, nBits = count_of_eligible_hospitals)
# Inspect solution
plot(GA)
summary(GA)
# Extract solution
#print(paste0("sum of solution", sum(summary(GA)$solution)))
return(GA)
}
# Helper function that returns the cost for a given solution.
f_check_solution <- function(v_hospital_assignment) {
cost_result <- f_calculate_total_cost(v_hospital_assignment)
return(cost_result)
}
#f_check_solution(rep(1, 1488), grid_CNT, 50000000, 5000 * 20, 10)
#f_setup(grid_CNT, 50000000, 5000 * 20, 10, 0.98)
m_begin_solution <- matrix(c(v_initial_solution_new), ncol=1624, byrow=TRUE)
GA <- f_ga_optimize(grid_CNT, m_begin_solution, 50000000, 5000 * 20, 10, 0.98)
f_ga_optimize <- function(df_grid, m_begin_solution, investment_cost_per_hospital, operational_cost_per_hospital, transport_cost_per_mile, min_accident_coverage) {
#f_setup(df_grid, investment_cost_per_hospital, operational_cost_per_hospital, transport_cost_per_mile, min_accident_coverage)
# v_hospital_assignment: a logical vector (0 or 1's), indicating whether a hospital should be built on a cell.
# Note: to reduce the search space, the length of this vector is only cells with eligible_hospital == TRUE.
f_fitness <- function(v_hospital_assignment) {
total_cost = 0
# Optimize the assignment of accidents to hospitals
m_assignment <- f_optimal_assignment(v_hospital_assignment, m_transport_cost_to_hospital_per_accident)
# Verify whether the assignment matrix actually matches our constraints (98% coverage)
missing_coverage <- f_get_missing_coverage(m_assignment)
missing_coverage_percentage <- missing_coverage / cte_sum_total_accidents
if (missing_coverage > cte_max_accidents_to_not_cover) {
# Very harsh penalty (1.797693e+308)
return(-(cte_penalty + (missing_coverage_percentage * cte_penalty)))
}
# Calculate the individual cost matrix
m_hospital_costs <- f_calculate_individual_cost(v_hospital_assignment, m_assignment)
# Fourth column is the total cost
total_cost = -sum(m_hospital_costs[,4])
# Turn the sum negative!
return(total_cost)
}
count_of_eligible_hospitals = sum(df_grid$eligible_hospital)
print("[*] Running Genetic Algorithm on the grid")
#
GA <- ga("binary", fitness = f_fitness, suggestions = m_begin_solution, maxiter = 50, run = 200, seed = 123, nBits = count_of_eligible_hospitals)
# Inspect solution
plot(GA)
summary(GA)
# Extract solution
#print(paste0("sum of solution", sum(summary(GA)$solution)))
return(GA)
}
# Helper function that returns the cost for a given solution.
f_check_solution <- function(v_hospital_assignment) {
cost_result <- f_calculate_total_cost(v_hospital_assignment)
return(cost_result)
}
#f_check_solution(rep(1, 1488), grid_CNT, 50000000, 5000 * 20, 10)
#f_setup(grid_CNT, 50000000, 5000 * 20, 10, 0.98)
m_begin_solution <- matrix(c(v_initial_solution_new), ncol=1624, byrow=TRUE)
GA <- f_ga_optimize(grid_CNT, m_begin_solution, 50000000, 5000 * 20, 10, 0.98)
f_check_coverage_of_solution(optimal_grid_CNT[optimal_grid_CNT$eligible_hospital,]$build_hospital)
identical(optimal_grid_CNT[optimal_grid_CNT$eligible_hospital,]$build_hospital, v_initial_solution_new)
f_calculate_total_cost(v_initial_solution_new)
f_check_coverage_of_solution(optimal_grid_CNT[optimal_grid_CNT$eligible_hospital,]$build_hospital)
cte_cutoff_transport_cost
cte_cutoff_transport_cost <- 1000
f_generate_matrix_transport_cost <- function(df_grid) {
## Make local matrix of the x,y coords of the grid
m_grid <- cbind(df_grid$x, df_grid$y)
## Calculate distance grid
## BUG: this uses the euclidian distance, and isn't actually accurate with the curverature of earth
## but then again, for a radius of 100 miles this likely doesn't matter.
## A better but very computationally expensive "improvement" would be to use haversin.
m_distances_between_all_regions <- as.matrix(dist(m_grid, diag = TRUE, upper = TRUE))
## Reduce it to a matrix to only contains the distances to hospitals
cells_in_grid_capable_of_hospital = as.integer(rownames(df_grid[df_grid$eligible_hospital == TRUE,]))
# This is a horrible constant that approximates the radian distance to kilometers
# It's absoluletly horrible but hey, you're asking a european to plan usa hospitals.
# What do I care?
cte_cost_per_kilometer = (cte_transport_cost_per_mile / 1.61)
cte_radian_to_kilometers_coeff = 110
m_costs_transport <- (cte_cost_per_kilometer * cte_radian_to_kilometers_coeff) * m_distances_between_all_regions[c(cells_in_grid_capable_of_hospital),]
# Return the cost matrix per accident of size h x c,
# where h is the amount of cells that can house a hospital, and c is the total amount of cells in the grid.
return(m_costs_transport)
}
f_setup(grid_CNT, 50000000, 5000 * 20, 10, 0.98)
f_check_coverage_of_solution(optimal_grid_CNT[optimal_grid_CNT$eligible_hospital,]$build_hospital)
?distm
install.packages("geosphere")
install.packages("geosphere")
f_check_coverage_of_solution(optimal_grid_CNT[optimal_grid_CNT$eligible_hospital,]$build_hospital)
identical(optimal_grid_CNT[optimal_grid_CNT$eligible_hospital,]$build_hospital, v_initial_solution_new)
install.packages("geosphere")
install.packages("geosphere")
